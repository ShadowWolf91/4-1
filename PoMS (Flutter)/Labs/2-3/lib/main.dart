import 'dart:convert';

interface class BiggestCompaniesCheck {
  String checkTopHundreedAffilation() {
    return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Ç–æ–ø-100 –∫–æ–º–ø–∞–Ω–∏—è–º";
  }
}

abstract class FoodFactory implements BiggestCompaniesCheck {
  String _founder = '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
  bool isOnTop = false;
  String? country;
  double totalIncome = 0;
  String description = '';
  static int count = 0;

  Set brands = {};
  Map concurents = {};

  String info();

  static double stockCalculator(
      {double oneStockPrice = 0, int amountOfStocks = 0}) {
    return oneStockPrice * amountOfStocks;
  }

  static int howMuchStocksToBuy(double money, double oneStockPrice) {
    try {
      int amount = (money / oneStockPrice).floor();
      return amount;
    } catch (e) {
      print("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å");
    } finally {
      print("–ë–ª–æ–∫ finally");
    }
    return 0;
  }

  FoodFactory(this.isOnTop, this.country, this.totalIncome, this.description) {
    FoodFactory.count++;
  }

  static String classInfo() {
    return "–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ üòã";
  }

  void printInfo(Function func1, Function func2) {
    func1();
    func2();
  }

  void printCountry() {
    print("–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è - $country");
  }

  void printIncome() {
    print("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å - $totalIncome –º–ª—Ä–¥ –¥–æ–ª–ª–∞—Ä–æ–≤ ");
  }

  set setFounder(String value) {
    _founder = value;
  }

  String get getFounder {
    return _founder;
  }

  @override
  String checkTopHundreedAffilation() {
    if (isOnTop) {
      return "–ö–æ–º–ø–∞–Ω–∏—è –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø-100 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –º–∏—Ä–∞";
    } else {
      return "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø-100 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –º–∏—Ä–∞";
    }
  }
}

mixin MakeCandies {
  void doCandies() {
    print("–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–∞–¥–æ—Å—Ç–∏");
  }
}

mixin MakeDrinks {
  void doDrinks() {
    print("–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–∞–ø–∏—Ç–∫–∏");
  }
}

class Nestle extends FoodFactory
    with MakeCandies, MakeDrinks
    implements Comparable {
  Nestle(super.isOnTop, super.country, super.totalIncome, super.description);
  Nestle.named(
      super.isOnTop, super.country, super.totalIncome, super.description) {
    super.description += "(—Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)";
  }
  @override
  String info() {
    return description;
  }

  @override
  int compareTo(other) {
    return totalIncome.compareTo(other.totalIncome);
  }
}

class PepsiCo extends FoodFactory {
  PepsiCo(super.isOnTop, super.country, super.totalIncome, super.description);
  PepsiCo.named(
      super.isOnTop, super.country, super.totalIncome, super.description) {
    super.description += "(—Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)";
  }

  @override
  String info() {
    return description;
  }

  Future<void> sendMail() async {
    print("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ ");
    String message = await getMessage();
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $message");
    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏");
  }

  Future<String> getMessage() {
    return Future.delayed(
        Duration(seconds: 3), () => "Nestle –∏ Pepsico - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã");
  }
}

class FoodBrandsIterator implements Iterator<String> {
  final List<dynamic> _brands;
  int _currentIndex = 0;

  FoodBrandsIterator(this._brands);

  @override
  String get current {
    if (_currentIndex < _brands.length) {
      return _brands[_currentIndex];
    }
    throw StateError('–ë–æ–ª—å—à–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ');
  }

  @override
  bool moveNext() {
    _currentIndex++;
    return _currentIndex < _brands.length;
  }
}

class FoodBrandsIterable extends Iterable<String> {
  final List<dynamic> _brands;

  FoodBrandsIterable(this._brands);

  @override
  Iterator<String> get iterator => FoodBrandsIterator(_brands);
}

class Buyer {
  String name;
  int age;
  Buyer(this.name, this.age);

  Buyer.fromJson(Map<String, dynamic> json)
      : name = json['name'],
        age = json['age'];

  Map<String, dynamic> toJson() => {
    'name': name,
    'age': age,
  };
}

void main(List<String> arguments) {
  print(FoodFactory.classInfo());
  var nestle = Nestle(true, "–®–≤–µ–π—Ü–∞—Ä–∏—è", 74.1,
      "–ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è –º–∏—Ä–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è");
  var pepsico = PepsiCo.named(false, "–°–®–ê", 70.4,
      "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –≤ —Å—Ñ–µ—Ä–µ –ø–∏—â–µ–≤–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏");
  nestle.setFounder = '–ê–Ω—Ä–∏ –ù–µ—Å—Ç–ª–µ';
  print(nestle.getFounder);
  print(nestle.info());
  print(pepsico.info());
  nestle.printInfo(nestle.printCountry, nestle.printIncome);
  print(
      "–°—Ç–æ–∏–º–æ—Å—Ç—å 23 –∞–∫—Ü–∏–π ${FoodFactory.stockCalculator(amountOfStocks: 23, oneStockPrice: 153.2)} –¥–æ–ª–ª–∞—Ä–æ–≤ ");
  print("---------------------- –†–∞–±–æ—Ç–∞ —Å exception--------------------------");
  print(
      "–ù–∞ 12412 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å ${FoodFactory.howMuchStocksToBuy(12412, 5)} –∞–∫—Ü–∏–π");

  nestle.brands.add("Nesquik");
  nestle.brands.add("KitKat");
  nestle.brands.add("Nestea");
  nestle.brands.add("Gerber");
  nestle.brands.add("Perrier");
  nestle.brands.add("Perrier");
  print("------------------------------Set----------------------------------");
  print(nestle.brands);
  print("---------------–†–∞–±–æ—Ç–∞ —Å List (c break –∏ continue)------------------");
  List brandsList = nestle.brands.toList();
  for (var element in brandsList) {
    if (brandsList.indexOf(element) == 4) {
      break;
    } else if (brandsList.indexOf(element) == 2) {
      continue;
    } else {
      print(element);
    }
  }
  print("------------------------------Map----------------------------------");
  nestle.concurents = {
    1: "P&G",
    2: "Kraft",
    3: "Kellog's",
    4: "Pepsico",
    5: "Coca-cola"
  };
  print(nestle.concurents);
  print(nestle.concurents.containsKey(3));
  print(nestle.concurents.containsValue("Apple"));
  nestle.concurents.remove(3);
  print(nestle.concurents);
  print(nestle.concurents.containsKey(3));
  print("--------------------------Mixins----------------------------------");
  nestle.doCandies();
  nestle.doDrinks();
  print("------------------------Comparable-------------------------------");
  print(nestle.compareTo(pepsico));
  print("------------------------Iterator--------------------------------");
  final iterator = FoodBrandsIterator(brandsList);
  while (iterator.moveNext()) {
    print(iterator.current);
  }
  print("------------------------Iterable--------------------------------");
  final iterable = FoodBrandsIterable(brandsList);
  for (final brand in iterable) {
    print(brand);
  }
  print("------–º–µ—Ç–æ–¥—ã Iterable");
  print(iterable.isEmpty);
  print(iterable.first);
  print(iterable.last);
  print(iterable.length);
  print(iterable.iterator.current);
  print("------------------------JSON-----------------------------------");
  Buyer male = Buyer("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", 20);
  String json = jsonEncode(male);
  print(json);
  Map<String, dynamic> userMap = jsonDecode(json);
  var person = Buyer.fromJson(userMap);
  print("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ${person.name}, –≤–æ–∑—Ä–∞—Å—Ç ${person.age} –ª–µ—Ç");
  print("-------------------–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ + Future--------------------");
  pepsico.sendMail();
  print('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ sendMail()');
  print('----------------------------Stream-------------------------------');
  // –°–æ–∑–¥–∞–µ–º Single-Subscription Stream
  final singleSubscriptionStream = Stream<int>.fromIterable([1, 2, 3, 4, 5]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫
  final subscription = singleSubscriptionStream.listen(
        (data) => print('–ü–æ–ª—É—á–µ–Ω–æ: $data'),
    onDone: () => print('–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'),
  );

  // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ 3 —Å–µ–∫—É–Ω–¥
  Future.delayed(Duration(seconds: 1), () {
    subscription.cancel();
  });

  // –°–æ–∑–¥–∞–µ–º Broadcast Stream
  final broadcastStream =
  Stream<int>.periodic(Duration(seconds: 1), (count) => count)
      .take(8)
      .asBroadcastStream();

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –¥–≤–∞ —Ä–∞–∑–∞
  final subscription1 =
  broadcastStream.listen((data) => print('–ü–æ–¥–ø–∏—Å–∫–∞ 1: $data'));
  broadcastStream.listen((data) => print('–ü–æ–¥–ø–∏—Å–∫–∞ 2: $data'));

  // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥
  Future.delayed(Duration(seconds: 5), () {
    subscription1.cancel();
  });
}